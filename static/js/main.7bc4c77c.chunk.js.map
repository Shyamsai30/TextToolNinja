{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","placeholder","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7bc4c77c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode}  bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n\r\n          {/* Enable Dark Mode */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            } mx-2`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              DarkMode\r\n            </label>\r\n          </div>\r\n\r\n          {/* Search Button */}\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string, aboutText: PropTypes.string };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" +  text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value) \r\n    }\r\n\r\n    // Credits: A\r\n    const handleCopy = () => {\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    // Credits: Coding Wala\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import \"./App.css\";\n\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(`light`); // Whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  // Toggle  Dark Mode\n  const toggleMode = () => {\n    if (mode === `light`) {\n      setMode(`dark`);\n      document.body.style.backgroundColor = \"#020334\";\n      showAlert(`Dark mode has been enabled`, \"success\");\n      document.title = \"TextToolNinja - Dark Mode\";\n    } else {\n      setMode(`light`);\n      document.body.style.backgroundColor = \"white\";\n      showAlert(`Light mode has been enabled`, \"success\");\n      document.title = \"TextToolNnja - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <BrowserRouter> */}\n        <Navbar\n          title=\"TextToolNinja\"\n          aboutText=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n\n        <Alert alert={alert} />\n        <div className=\"container my-3\" mode={mode}>\n          {/* <Routes>\n            <Route path=\"/about\" element={<About />} />\n          </Routes>\n          <Routes>\n            <Route\n              path=\"/\"\n              element={ */}\n                <TextForm\n                  showAlert={showAlert}\n                  heading=\"Enter the text to analyze below\"\n                  mode={mode}\n                />\n              {/* }\n            />\n          </Routes> */}\n        </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}